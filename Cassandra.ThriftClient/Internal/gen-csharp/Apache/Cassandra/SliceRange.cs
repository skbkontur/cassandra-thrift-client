/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra
{

  /// <summary>
  /// A slice range is a structure that stores basic range, ordering and limit information for a query that will return
  /// multiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY
  /// 
  /// @param start. The column name to start the slice with. This attribute is not required, though there is no default value,
  ///               and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it
  ///               must a valid value under the rules of the Comparator defined for the given ColumnFamily.
  /// @param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,
  ///                and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
  ///                must also be a valid value to the ColumnFamily Comparator.
  /// @param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
  /// @param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will
  ///               materialize the whole result into memory before returning it to the client, so be aware that you may
  ///               be better served by iterating through slices by passing the last value of one call in as the 'start'
  ///               of the next instead of increasing 'count' arbitrarily large.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  internal partial class SliceRange : TBase
  {

    public byte[] Start { get; set; }

    public byte[] Finish { get; set; }

    public bool Reversed { get; set; }

    public int Count { get; set; }

    public SliceRange() {
      this.Reversed = false;
      this.Count = 100;
    }

    public SliceRange(byte[] start, byte[] finish, bool reversed, int count) : this() {
      this.Start = start;
      this.Finish = finish;
      this.Reversed = reversed;
      this.Count = count;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_start = false;
        bool isset_finish = false;
        bool isset_reversed = false;
        bool isset_count = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Start = iprot.ReadBinary();
                isset_start = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Finish = iprot.ReadBinary();
                isset_finish = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Reversed = iprot.ReadBool();
                isset_reversed = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
                isset_count = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_start)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Start not set");
        if (!isset_finish)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Finish not set");
        if (!isset_reversed)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Reversed not set");
        if (!isset_count)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Count not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SliceRange");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Start == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Start not set");
        field.Name = "start";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Start);
        oprot.WriteFieldEnd();
        if (Finish == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Finish not set");
        field.Name = "finish";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Finish);
        oprot.WriteFieldEnd();
        field.Name = "reversed";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Reversed);
        oprot.WriteFieldEnd();
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SliceRange(");
      __sb.Append(", Start: ");
      __sb.Append(Start);
      __sb.Append(", Finish: ");
      __sb.Append(Finish);
      __sb.Append(", Reversed: ");
      __sb.Append(Reversed);
      __sb.Append(", Count: ");
      __sb.Append(Count);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
