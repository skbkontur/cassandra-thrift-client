/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  internal partial class ColumnDef : TBase
  {
    private IndexType _index_type;
    private string _index_name;
    private Dictionary<string, string> _index_options;

    public byte[] Name { get; set; }

    public string Validation_class { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="IndexType"/>
    /// </summary>
    public IndexType Index_type
    {
      get
      {
        return _index_type;
      }
      set
      {
        __isset.index_type = true;
        this._index_type = value;
      }
    }

    public string Index_name
    {
      get
      {
        return _index_name;
      }
      set
      {
        __isset.index_name = true;
        this._index_name = value;
      }
    }

    public Dictionary<string, string> Index_options
    {
      get
      {
        return _index_options;
      }
      set
      {
        __isset.index_options = true;
        this._index_options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    internal struct Isset {
      public bool index_type;
      public bool index_name;
      public bool index_options;
    }

    public ColumnDef() {
    }

    public ColumnDef(byte[] name, string validation_class) : this() {
      this.Name = name;
      this.Validation_class = validation_class;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name = false;
        bool isset_validation_class = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadBinary();
                isset_name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Validation_class = iprot.ReadString();
                isset_validation_class = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Index_type = (IndexType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Index_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  Index_options = new Dictionary<string, string>();
                  TMap _map45 = iprot.ReadMapBegin();
                  for( int _i46 = 0; _i46 < _map45.Count; ++_i46)
                  {
                    string _key47;
                    string _val48;
                    _key47 = iprot.ReadString();
                    _val48 = iprot.ReadString();
                    Index_options[_key47] = _val48;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_validation_class)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Validation_class not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ColumnDef");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Name);
        oprot.WriteFieldEnd();
        if (Validation_class == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Validation_class not set");
        field.Name = "validation_class";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Validation_class);
        oprot.WriteFieldEnd();
        if (__isset.index_type) {
          field.Name = "index_type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Index_type);
          oprot.WriteFieldEnd();
        }
        if (Index_name != null && __isset.index_name) {
          field.Name = "index_name";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Index_name);
          oprot.WriteFieldEnd();
        }
        if (Index_options != null && __isset.index_options) {
          field.Name = "index_options";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Index_options.Count));
            foreach (string _iter49 in Index_options.Keys)
            {
              oprot.WriteString(_iter49);
              oprot.WriteString(Index_options[_iter49]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ColumnDef(");
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", Validation_class: ");
      __sb.Append(Validation_class);
      if (__isset.index_type) {
        __sb.Append(", Index_type: ");
        __sb.Append(Index_type);
      }
      if (Index_name != null && __isset.index_name) {
        __sb.Append(", Index_name: ");
        __sb.Append(Index_name);
      }
      if (Index_options != null && __isset.index_options) {
        __sb.Append(", Index_options: ");
        __sb.Append(Index_options);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
