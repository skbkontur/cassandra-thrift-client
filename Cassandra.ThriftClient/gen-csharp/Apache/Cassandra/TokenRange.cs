/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra
{

  /// <summary>
  /// A TokenRange describes part of the Cassandra ring, it is a mapping from a range to
  /// endpoints responsible for that range.
  /// @param start_token The first token in the range
  /// @param end_token The last token in the range
  /// @param endpoints The endpoints responsible for the range (listed by their configured listen_address)
  /// @param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TokenRange : TBase
  {
    private List<string> _rpc_endpoints;
    private List<EndpointDetails> _endpoint_details;

    public string Start_token { get; set; }

    public string End_token { get; set; }

    public List<string> Endpoints { get; set; }

    public List<string> Rpc_endpoints
    {
      get
      {
        return _rpc_endpoints;
      }
      set
      {
        __isset.rpc_endpoints = true;
        this._rpc_endpoints = value;
      }
    }

    public List<EndpointDetails> Endpoint_details
    {
      get
      {
        return _endpoint_details;
      }
      set
      {
        __isset.endpoint_details = true;
        this._endpoint_details = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rpc_endpoints;
      public bool endpoint_details;
    }

    public TokenRange() {
    }

    public TokenRange(string start_token, string end_token, List<string> endpoints) : this() {
      this.Start_token = start_token;
      this.End_token = end_token;
      this.Endpoints = endpoints;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_start_token = false;
        bool isset_end_token = false;
        bool isset_endpoints = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Start_token = iprot.ReadString();
                isset_start_token = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                End_token = iprot.ReadString();
                isset_end_token = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Endpoints = new List<string>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    string _elem30;
                    _elem30 = iprot.ReadString();
                    Endpoints.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
                isset_endpoints = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Rpc_endpoints = new List<string>();
                  TList _list31 = iprot.ReadListBegin();
                  for( int _i32 = 0; _i32 < _list31.Count; ++_i32)
                  {
                    string _elem33;
                    _elem33 = iprot.ReadString();
                    Rpc_endpoints.Add(_elem33);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Endpoint_details = new List<EndpointDetails>();
                  TList _list34 = iprot.ReadListBegin();
                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)
                  {
                    EndpointDetails _elem36;
                    _elem36 = new EndpointDetails();
                    _elem36.Read(iprot);
                    Endpoint_details.Add(_elem36);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_start_token)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Start_token not set");
        if (!isset_end_token)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field End_token not set");
        if (!isset_endpoints)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Endpoints not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TokenRange");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Start_token == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Start_token not set");
        field.Name = "start_token";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Start_token);
        oprot.WriteFieldEnd();
        if (End_token == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field End_token not set");
        field.Name = "end_token";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(End_token);
        oprot.WriteFieldEnd();
        if (Endpoints == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Endpoints not set");
        field.Name = "endpoints";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Endpoints.Count));
          foreach (string _iter37 in Endpoints)
          {
            oprot.WriteString(_iter37);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Rpc_endpoints != null && __isset.rpc_endpoints) {
          field.Name = "rpc_endpoints";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Rpc_endpoints.Count));
            foreach (string _iter38 in Rpc_endpoints)
            {
              oprot.WriteString(_iter38);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Endpoint_details != null && __isset.endpoint_details) {
          field.Name = "endpoint_details";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Endpoint_details.Count));
            foreach (EndpointDetails _iter39 in Endpoint_details)
            {
              _iter39.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TokenRange(");
      __sb.Append(", Start_token: ");
      __sb.Append(Start_token);
      __sb.Append(", End_token: ");
      __sb.Append(End_token);
      __sb.Append(", Endpoints: ");
      __sb.Append(Endpoints);
      if (Rpc_endpoints != null && __isset.rpc_endpoints) {
        __sb.Append(", Rpc_endpoints: ");
        __sb.Append(Rpc_endpoints);
      }
      if (Endpoint_details != null && __isset.endpoint_details) {
        __sb.Append(", Endpoint_details: ");
        __sb.Append(Endpoint_details);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
