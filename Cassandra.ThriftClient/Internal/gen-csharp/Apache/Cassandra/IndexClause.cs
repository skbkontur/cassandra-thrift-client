/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra
{

  /// <summary>
  /// @deprecated use a KeyRange with row_filter in get_range_slices instead
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  internal partial class IndexClause : TBase
  {

    public List<IndexExpression> Expressions { get; set; }

    public byte[] Start_key { get; set; }

    public int Count { get; set; }

    public IndexClause() {
      this.Count = 100;
    }

    public IndexClause(List<IndexExpression> expressions, byte[] start_key, int count) : this() {
      this.Expressions = expressions;
      this.Start_key = start_key;
      this.Count = count;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_expressions = false;
        bool isset_start_key = false;
        bool isset_count = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Expressions = new List<IndexExpression>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    IndexExpression _elem14;
                    _elem14 = new IndexExpression();
                    _elem14.Read(iprot);
                    Expressions.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
                isset_expressions = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Start_key = iprot.ReadBinary();
                isset_start_key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
                isset_count = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_expressions)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Expressions not set");
        if (!isset_start_key)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Start_key not set");
        if (!isset_count)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Count not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("IndexClause");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Expressions == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Expressions not set");
        field.Name = "expressions";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Expressions.Count));
          foreach (IndexExpression _iter15 in Expressions)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Start_key == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Start_key not set");
        field.Name = "start_key";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Start_key);
        oprot.WriteFieldEnd();
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("IndexClause(");
      __sb.Append(", Expressions: ");
      __sb.Append(Expressions);
      __sb.Append(", Start_key: ");
      __sb.Append(Start_key);
      __sb.Append(", Count: ");
      __sb.Append(Count);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
