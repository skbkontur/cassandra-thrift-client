/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Cassandra
{

  /// <summary>
  /// The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and
  /// ColumnParent in terms of a directory structure.
  /// 
  /// ColumnPath is used to looking up a single column.
  /// 
  /// @param column_family. The name of the CF of the column being looked up.
  /// @param super_column. The super column name.
  /// @param column. The column name.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ColumnPath : TBase
  {
    private byte[] _super_column;
    private byte[] _column;

    public string Column_family { get; set; }

    public byte[] Super_column
    {
      get
      {
        return _super_column;
      }
      set
      {
        __isset.super_column = true;
        this._super_column = value;
      }
    }

    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool super_column;
      public bool column;
    }

    public ColumnPath() {
    }

    public ColumnPath(string column_family) : this() {
      this.Column_family = column_family;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_column_family = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Column_family = iprot.ReadString();
                isset_column_family = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Super_column = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Column = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_column_family)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Column_family not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ColumnPath");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Column_family == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Column_family not set");
        field.Name = "column_family";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Column_family);
        oprot.WriteFieldEnd();
        if (Super_column != null && __isset.super_column) {
          field.Name = "super_column";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Super_column);
          oprot.WriteFieldEnd();
        }
        if (Column != null && __isset.column) {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Column);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ColumnPath(");
      __sb.Append(", Column_family: ");
      __sb.Append(Column_family);
      if (Super_column != null && __isset.super_column) {
        __sb.Append(", Super_column: ");
        __sb.Append(Super_column);
      }
      if (Column != null && __isset.column) {
        __sb.Append(", Column: ");
        __sb.Append(Column);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
